var searchIndex = {};
searchIndex["mime_multipart"] = {"doc":"","items":[[3,"Part","mime_multipart","A multipart part which is not a file (stored in memory)",null,null],[3,"FilePart","","An uploaded file that was received as part of `multipart/*` parsing.\nFiles are streamed to disk to conserve memory (files are potentially very\nlarge)",null,null],[12,"headers","","The complete headers that were sent along with the file body.",0,null],[12,"path","","The temporary file where the file body was saved.",0,null],[12,"size","","The size of the file.",0,null],[4,"Node","","A multipart part which could be either a file, in memory, or another multipart\ncontainer containing nested parts.",null,null],[13,"Part","","A part in memory",1,null],[13,"File","","A part streamed to a file",1,null],[13,"Multipart","","A container of nested multipart parts",1,null],[5,"parse_multipart","","Parse a MIME multipart/* into a `Vec` of `Node`s.  You must pass in a `Read`able\nstream for reading the body, as well as the `Headers` separately.  If `always_use_files`\nis true, all parts will be streamed to files.  If false, only parts with a `Filename`\n`ContentDisposition` header will be streamed to files.  Recursive `multipart/*` parts\nwill are parsed as well and returned within a `Node::Multipart` variant.",null,{"inputs":[{"name":"s"},{"name":"headers"},{"name":"bool"}],"output":{"name":"result"}}],[5,"get_multipart_boundary","","Get the `multipart/*` boundary string from `hyper::Headers`",null,{"inputs":[{"name":"headers"}],"output":{"name":"result"}}],[0,"error","","",null,null],[4,"Error","mime_multipart::error","An error type for the `mime-multipart` crate.",null,null],[13,"NoRequestContentType","","The Hyper request did not have a Content-Type header.",2,null],[13,"NotMultipart","","The Hyper request Content-Type top-level Mime was not `Multipart`.",2,null],[13,"BoundaryNotSpecified","","The Content-Type header failed to specify boundary token.",2,null],[13,"PartialHeaders","","A multipart section contained only partial headers.",2,null],[13,"Eof","","The request body ended prior to reaching the expected terminating boundary.",2,null],[13,"Httparse","","An HTTP parsing error from a multipart section.",2,null],[13,"Io","","An I/O error.",2,null],[13,"Hyper","","An error was returned from Hyper.",2,null],[13,"Utf8","","An error occurred during UTF-8 processing.",2,null],[13,"Decoding","","An error occurred during character decoding",2,null],[11,"fmt","","",2,null],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"eq","mime_multipart","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"content_type","","Mime content-type specified in the header",3,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"new","","",0,{"inputs":[{"name":"headers"}],"output":{"name":"result"}}],[11,"filename","","Filename that was specified when the file was uploaded.  Returns `Ok&lt;None&gt;` if there\nwas no content-disposition header supplied.",0,null],[11,"content_type","","Mime content-type specified in the header",0,null],[11,"drop","","",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null]],"paths":[[3,"FilePart"],[4,"Node"],[4,"Error"],[3,"Part"]]};
initSearch(searchIndex);
